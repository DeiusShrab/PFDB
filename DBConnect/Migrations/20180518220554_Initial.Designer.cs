// <auto-generated />
using DBConnect;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace DBConnect.Migrations
{
    [DbContext(typeof(PFDBContext))]
    [Migration("20180518220554_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DBConnect.DBModels.Bestiary", b =>
                {
                    b.Property<int>("BestiaryId");

                    b.Property<string>("AbilityScoreMods")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AbilityScores")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Ac")
                        .HasColumnName("AC");

                    b.Property<int>("Acflat")
                        .HasColumnName("ACFlat");

                    b.Property<string>("Acmods")
                        .HasColumnName("ACMods")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("Actouch")
                        .HasColumnName("ACTouch");

                    b.Property<string>("AgeCategory")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Alignment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AlternateNameForm")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Aura")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("BaseAtk");

                    b.Property<string>("BaseStatistics")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("BeforeCombat")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("BestiaryTypeId");

                    b.Property<string>("Bloodline")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int>("Burrow");

                    b.Property<int>("Cha")
                        .HasColumnName("CHA");

                    b.Property<bool>("CharacterFlag");

                    b.Property<string>("Class")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ClassArchetypes")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int>("Climb");

                    b.Property<int>("Cmb")
                        .HasColumnName("CMB");

                    b.Property<int>("Cmd")
                        .HasColumnName("CMD");

                    b.Property<string>("CompanionFamiliarLink")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool>("CompanionFlag");

                    b.Property<int>("Con")
                        .HasColumnName("CON");

                    b.Property<int>("Cr")
                        .HasColumnName("CR");

                    b.Property<string>("DefensiveAbilities")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DescriptionVisual")
                        .IsUnicode(false);

                    b.Property<int>("Dex")
                        .HasColumnName("DEX");

                    b.Property<bool>("DontUseRacialHd")
                        .HasColumnName("DontUseRacialHD");

                    b.Property<string>("Dr")
                        .HasColumnName("DR")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DuringCombat")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Environment")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("ExtractsPrepared")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Feats")
                        .IsUnicode(false);

                    b.Property<int>("Fly");

                    b.Property<string>("FocusedSchool")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int>("Fortitude");

                    b.Property<string>("Gear")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Group")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Hd")
                        .HasColumnName("HD")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Hp")
                        .HasColumnName("HP");

                    b.Property<string>("Hpmods")
                        .HasColumnName("HPMods")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Immune")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("Init");

                    b.Property<int>("Int")
                        .HasColumnName("INT");

                    b.Property<bool>("IsTemplate");

                    b.Property<int>("Land");

                    b.Property<string>("Languages")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("LinkText")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Melee")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Morale")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("Mr")
                        .HasColumnName("MR");

                    b.Property<int>("Mt")
                        .HasColumnName("MT");

                    b.Property<string>("Mystery")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool>("Mythic");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OffenseNote")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Organization")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("OtherGear")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Patron")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("ProhibitedSchools")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Race")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RacialMods")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Ranged")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Reach")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Reflex");

                    b.Property<string>("Resist")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("SaveMods")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Senses")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Size")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Skills")
                        .IsUnicode(false);

                    b.Property<string>("Space")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SpecialAbilities")
                        .IsUnicode(false);

                    b.Property<string>("SpecialAttacks")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Speed")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SpeedMod")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SpellDomains")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SpellLikeAbilities")
                        .IsUnicode(false);

                    b.Property<string>("SpellsKnown")
                        .IsUnicode(false);

                    b.Property<string>("SpellsPrepared")
                        .IsUnicode(false);

                    b.Property<string>("Sq")
                        .HasColumnName("SQ")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("Sr")
                        .HasColumnName("SR");

                    b.Property<string>("StatisticsNote")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Str")
                        .HasColumnName("STR");

                    b.Property<string>("SubType")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Swim");

                    b.Property<string>("TemplatesApplied")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Traits")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Treasure")
                        .IsUnicode(false);

                    b.Property<int?>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("UniqueMonster");

                    b.Property<string>("VariantParent")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Vulnerability")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Weaknesses")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Will");

                    b.Property<int>("Wis")
                        .HasColumnName("WIS");

                    b.Property<int>("Xp")
                        .HasColumnName("XP");

                    b.HasKey("BestiaryId");

                    b.HasIndex("BestiaryTypeId");

                    b.HasIndex("Type");

                    b.ToTable("Bestiary");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryDetail", b =>
                {
                    b.Property<int>("BestiaryId");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("FullText")
                        .IsUnicode(false);

                    b.Property<string>("MonsterSource")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("BestiaryId");

                    b.ToTable("BestiaryDetail");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryEnvironment", b =>
                {
                    b.Property<int>("BestiaryEnvironmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BestiaryId");

                    b.Property<int?>("BestiaryId1");

                    b.Property<int>("EnvironmentId");

                    b.Property<int?>("EnvironmentId1");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("BestiaryEnvironmentId");

                    b.HasIndex("BestiaryId");

                    b.HasIndex("BestiaryId1");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("EnvironmentId1");

                    b.ToTable("BestiaryEnvironment");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryFeat", b =>
                {
                    b.Property<int>("BestiaryFeatId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BestiaryId");

                    b.Property<int?>("BestiaryId1");

                    b.Property<int>("FeatId");

                    b.Property<int?>("FeatId1");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("BestiaryFeatId");

                    b.HasIndex("BestiaryId");

                    b.HasIndex("BestiaryId1");

                    b.HasIndex("FeatId");

                    b.HasIndex("FeatId1");

                    b.ToTable("BestiaryFeat");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryLanguage", b =>
                {
                    b.Property<int>("BestiaryLanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BestiaryId");

                    b.Property<int?>("BestiaryId1");

                    b.Property<int>("LanguageId");

                    b.Property<int?>("LanguageId1");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("BestiaryLanguageId");

                    b.HasIndex("BestiaryId");

                    b.HasIndex("BestiaryId1");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageId1");

                    b.ToTable("BestiaryLanguage");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryMagic", b =>
                {
                    b.Property<int>("BestiaryMagicId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BestiaryId");

                    b.Property<int?>("BestiaryId1");

                    b.Property<int>("CasterLevel");

                    b.Property<int>("MagicTypeId");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("SpellId");

                    b.Property<int?>("SpellId1");

                    b.Property<int>("UsesPerDay");

                    b.HasKey("BestiaryMagicId");

                    b.HasIndex("BestiaryId");

                    b.HasIndex("BestiaryId1");

                    b.HasIndex("SpellId");

                    b.HasIndex("SpellId1");

                    b.ToTable("BestiaryMagic");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiarySkill", b =>
                {
                    b.Property<int>("BestiarySkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BestiaryId");

                    b.Property<int?>("BestiaryId1");

                    b.Property<int>("Bonus");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("SkillId");

                    b.Property<int?>("SkillId1");

                    b.HasKey("BestiarySkillId");

                    b.HasIndex("BestiaryId");

                    b.HasIndex("BestiaryId1");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillId1");

                    b.ToTable("BestiarySkill");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiarySubType", b =>
                {
                    b.Property<int>("BestiarySubTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BestiaryId");

                    b.Property<int?>("BestiaryId1");

                    b.Property<int>("BestiaryTypeId");

                    b.Property<int?>("BestiaryTypeId1");

                    b.HasKey("BestiarySubTypeId");

                    b.HasIndex("BestiaryId");

                    b.HasIndex("BestiaryId1");

                    b.HasIndex("BestiaryTypeId");

                    b.HasIndex("BestiaryTypeId1");

                    b.ToTable("BestiarySubType");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryType", b =>
                {
                    b.Property<int>("BestiaryTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("BestiaryTypeId");

                    b.ToTable("BestiaryType");
                });

            modelBuilder.Entity("DBConnect.DBModels.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CampaignNotes")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<bool>("IsActive");

                    b.HasKey("CampaignId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("DBConnect.DBModels.CampaignData", b =>
                {
                    b.Property<int>("CampaignId");

                    b.Property<string>("Key")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("CampaignId1");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("CampaignId", "Key");

                    b.HasIndex("CampaignId1");

                    b.ToTable("CampaignData");
                });

            modelBuilder.Entity("DBConnect.DBModels.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CampaignId");

                    b.Property<int?>("CampaignId1");

                    b.Property<string>("Deity")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PlayerId");

                    b.Property<int?>("PlayerId1");

                    b.Property<int?>("RaceId");

                    b.Property<int?>("RaceId1");

                    b.HasKey("CharacterId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignId1");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId1");

                    b.HasIndex("RaceId");

                    b.HasIndex("RaceId1");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterClassAbility", b =>
                {
                    b.Property<int>("CharacterClassAbilityId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharacterId");

                    b.Property<int?>("CharacterId1");

                    b.Property<int>("ClassAbilityId");

                    b.Property<int?>("ClassAbilityId1");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("CharacterClassAbilityId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacterId1");

                    b.HasIndex("ClassAbilityId");

                    b.HasIndex("ClassAbilityId1");

                    b.ToTable("CharacterClassAbility");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterClassLevel", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("CharacterClassId");

                    b.Property<int?>("CharacterId1");

                    b.Property<int?>("ClassId");

                    b.Property<int>("Level");

                    b.HasKey("CharacterId", "CharacterClassId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("CharacterId1");

                    b.HasIndex("ClassId");

                    b.ToTable("CharacterClassLevel");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterFeat", b =>
                {
                    b.Property<int>("CharacterFeatId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharacterId");

                    b.Property<int?>("CharacterId1");

                    b.Property<int>("FeatId");

                    b.Property<int?>("FeatId1");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("CharacterFeatId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacterId1");

                    b.HasIndex("FeatId");

                    b.HasIndex("FeatId1");

                    b.ToTable("CharacterFeat");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterGear", b =>
                {
                    b.Property<int>("CharacterGearId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharacterId");

                    b.Property<int?>("CharacterId1");

                    b.Property<int>("GearId");

                    b.Property<int?>("GearId1");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("Quantity");

                    b.HasKey("CharacterGearId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacterId1");

                    b.HasIndex("GearId");

                    b.HasIndex("GearId1");

                    b.ToTable("CharacterGear");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterGearEnchantment", b =>
                {
                    b.Property<int>("CharacterGearId");

                    b.Property<int>("EnchantmentId");

                    b.Property<int?>("CharacterGearId1");

                    b.Property<int?>("EnchantmentId1");

                    b.HasKey("CharacterGearId", "EnchantmentId");

                    b.HasIndex("CharacterGearId1");

                    b.HasIndex("EnchantmentId");

                    b.HasIndex("EnchantmentId1");

                    b.ToTable("CharacterGearEnchantment");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterLanguage", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("LanguageId");

                    b.Property<int?>("CharacterId1");

                    b.Property<int?>("LanguageId1");

                    b.HasKey("CharacterId", "LanguageId");

                    b.HasIndex("CharacterId1");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageId1");

                    b.ToTable("CharacterLanguage");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterMagic", b =>
                {
                    b.Property<int>("CharacterMagicId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharacterId");

                    b.Property<int?>("CharacterId1");

                    b.Property<int>("MagicType");

                    b.Property<string>("Notes");

                    b.Property<int>("SpellId");

                    b.Property<int?>("SpellId1");

                    b.HasKey("CharacterMagicId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacterId1");

                    b.HasIndex("SpellId");

                    b.HasIndex("SpellId1");

                    b.ToTable("CharacterMagic");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterSkill", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("SkillId");

                    b.Property<int?>("CharacterId1");

                    b.Property<int>("Ranks");

                    b.Property<int?>("SkillId1");

                    b.HasKey("CharacterId", "SkillId");

                    b.HasIndex("CharacterId1");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillId1");

                    b.ToTable("CharacterSkill");
                });

            modelBuilder.Entity("DBConnect.DBModels.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alignment")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("ArchetypeForClassId");

                    b.Property<int>("CastingStat");

                    b.Property<int>("HD");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("SkillPts");

                    b.Property<string>("StartingGold")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("ClassId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("DBConnect.DBModels.ClassAbility", b =>
                {
                    b.Property<int>("ClassAbilityId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassId");

                    b.Property<int?>("ClassId1");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<int>("LevelRequirement");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("ReplacesAbilityId");

                    b.HasKey("ClassAbilityId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ClassId1");

                    b.ToTable("ClassAbility");
                });

            modelBuilder.Entity("DBConnect.DBModels.ClassSkill", b =>
                {
                    b.Property<int>("ClassId");

                    b.Property<int>("SkillId");

                    b.Property<int?>("ClassId1");

                    b.Property<int?>("SkillId1");

                    b.HasKey("ClassId", "SkillId");

                    b.HasIndex("ClassId1");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillId1");

                    b.ToTable("ClassSkill");
                });

            modelBuilder.Entity("DBConnect.DBModels.Continent", b =>
                {
                    b.Property<int>("ContinentId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsUnderground");

                    b.Property<bool>("IsWater");

                    b.Property<string>("MapPath")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PrimaryLanguageId");

                    b.Property<int?>("PrimaryLanguageLanguageId");

                    b.HasKey("ContinentId");

                    b.HasIndex("PrimaryLanguageId");

                    b.HasIndex("PrimaryLanguageLanguageId");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("DBConnect.DBModels.ContinentWeather", b =>
                {
                    b.Property<int>("CWID")
                        .HasColumnName("CWID");

                    b.Property<string>("CWName")
                        .HasColumnName("CWName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("ContinentId");

                    b.Property<int?>("ContinentId1");

                    b.Property<int>("Duration");

                    b.Property<int?>("NextCWID")
                        .HasColumnName("NextCWID");

                    b.Property<int?>("ParentCWID")
                        .HasColumnName("ParentCWID");

                    b.Property<bool>("RandomDuration");

                    b.Property<int>("SeasonId");

                    b.Property<int?>("SeasonId1");

                    b.Property<int>("WeatherId");

                    b.Property<int?>("WeatherId1");

                    b.Property<int>("Weight");

                    b.HasKey("CWID");

                    b.HasIndex("ContinentId");

                    b.HasIndex("ContinentId1");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonId1");

                    b.HasIndex("WeatherId");

                    b.HasIndex("WeatherId1");

                    b.ToTable("ContinentWeather");
                });

            modelBuilder.Entity("DBConnect.DBModels.Enchantment", b =>
                {
                    b.Property<int>("EnchantmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Bonus");

                    b.Property<int>("BonusType");

                    b.Property<string>("Effect")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int>("EnchantmentType");

                    b.Property<int>("EnhancementCost");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("EnchantmentId");

                    b.ToTable("Enchantment");
                });

            modelBuilder.Entity("DBConnect.DBModels.Environment", b =>
                {
                    b.Property<int>("EnvironmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Temperature")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("TravelSpeed");

                    b.HasKey("EnvironmentId");

                    b.ToTable("Environment");
                });

            modelBuilder.Entity("DBConnect.DBModels.Faction", b =>
                {
                    b.Property<int>("FactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("ParentFactionId");

                    b.Property<int?>("PrimaryLanguageId");

                    b.Property<int?>("PrimaryLanguageLanguageId");

                    b.Property<int?>("PrimaryRaceId");

                    b.Property<int?>("PrimaryRaceRaceId");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("FactionId");

                    b.HasIndex("PrimaryLanguageId");

                    b.HasIndex("PrimaryLanguageLanguageId");

                    b.HasIndex("PrimaryRaceId");

                    b.HasIndex("PrimaryRaceRaceId");

                    b.ToTable("Faction");
                });

            modelBuilder.Entity("DBConnect.DBModels.FavoredClass", b =>
                {
                    b.Property<int>("FavoredClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CharacterRaceRaceId");

                    b.Property<int>("ClassId");

                    b.Property<int?>("ClassId1");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("RaceId");

                    b.HasKey("FavoredClassId");

                    b.HasIndex("CharacterRaceRaceId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ClassId1");

                    b.HasIndex("RaceId");

                    b.ToTable("FavoredClass");
                });

            modelBuilder.Entity("DBConnect.DBModels.Feat", b =>
                {
                    b.Property<int>("FeatId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ArmorMastery");

                    b.Property<string>("Benefit")
                        .IsUnicode(false);

                    b.Property<bool>("Betrayal");

                    b.Property<bool>("BloodHex");

                    b.Property<bool>("CompanionFamiliar");

                    b.Property<string>("CompletionBenefit")
                        .IsUnicode(false);

                    b.Property<bool>("Critical");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool>("Esoteric");

                    b.Property<string>("Fulltext")
                        .IsUnicode(false);

                    b.Property<string>("Goal")
                        .IsUnicode(false);

                    b.Property<bool>("Grit");

                    b.Property<bool>("ItemMastery");

                    b.Property<bool>("Multiples");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Normal")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool>("Panache");

                    b.Property<bool>("Performance");

                    b.Property<string>("PrerequisiteFeats")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("PrerequisiteSkills")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Prerequisites")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("RaceName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Racial");

                    b.Property<bool>("ShieldMastery");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Special")
                        .HasMaxLength(750)
                        .IsUnicode(false);

                    b.Property<bool>("Stare");

                    b.Property<bool>("Style");

                    b.Property<string>("SuggestedTraits")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Targeting");

                    b.Property<bool>("Teamwork");

                    b.Property<string>("Type")
                        .HasColumnName("Type_")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool>("WeaponMastery");

                    b.HasKey("FeatId");

                    b.ToTable("Feat");
                });

            modelBuilder.Entity("DBConnect.DBModels.Gear", b =>
                {
                    b.Property<int>("GearId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Type");

                    b.Property<int>("Weight");

                    b.HasKey("GearId");

                    b.ToTable("Gear");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Gear");
                });

            modelBuilder.Entity("DBConnect.DBModels.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("LanguageId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("DBConnect.DBModels.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContinentId");

                    b.Property<int?>("ContinentId1");

                    b.Property<int?>("EnvironmentId");

                    b.Property<int?>("EnvironmentId1");

                    b.Property<int?>("FactionId");

                    b.Property<int?>("FactionId1");

                    b.Property<int>("GridX");

                    b.Property<int>("GridY");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("TerrainId");

                    b.Property<int?>("TerrainId1");

                    b.Property<int?>("TerritoryId");

                    b.Property<int?>("TerritoryId1");

                    b.HasKey("LocationId");

                    b.HasIndex("ContinentId");

                    b.HasIndex("ContinentId1");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("EnvironmentId1");

                    b.HasIndex("FactionId");

                    b.HasIndex("FactionId1");

                    b.HasIndex("TerrainId");

                    b.HasIndex("TerrainId1");

                    b.HasIndex("TerritoryId");

                    b.HasIndex("TerritoryId1");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("DBConnect.DBModels.MagicItem", b =>
                {
                    b.Property<int>("MagicItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Abjuration");

                    b.Property<string>("Al")
                        .HasColumnName("AL")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Aura")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AuraStrength")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("BaseItem")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("Cha");

                    b.Property<int?>("Cl")
                        .HasColumnName("CL");

                    b.Property<string>("Communication")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Conjuration");

                    b.Property<string>("Cost")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("CostValue");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Destruction")
                        .IsUnicode(false);

                    b.Property<bool?>("Divination");

                    b.Property<int?>("Ego");

                    b.Property<bool?>("Enchantment");

                    b.Property<bool?>("Evocation");

                    b.Property<string>("FullText")
                        .IsUnicode(false);

                    b.Property<string>("Group")
                        .HasColumnName("Group_")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("Illusion");

                    b.Property<int?>("Int");

                    b.Property<string>("Languages")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("LegendaryWeapon");

                    b.Property<string>("LinkText")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MagicItems")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<bool?>("MajorArtifact");

                    b.Property<bool?>("MinorArtifact");

                    b.Property<bool?>("Mythic");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Necromancy");

                    b.Property<string>("Powers")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Price")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PriceValue");

                    b.Property<string>("Requirements")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Scaling")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Senses")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Slot")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Transmutation");

                    b.Property<bool?>("Universal");

                    b.Property<string>("Weight")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("WeightValue");

                    b.Property<int?>("Wis");

                    b.HasKey("MagicItemId");

                    b.ToTable("MagicItem");
                });

            modelBuilder.Entity("DBConnect.DBModels.MonsterSpawn", b =>
                {
                    b.Property<int>("SpawnId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BestiaryId");

                    b.Property<int?>("BestiaryId1");

                    b.Property<int>("ContinentId");

                    b.Property<int?>("ContinentId1");

                    b.Property<int>("PlaneId");

                    b.Property<int?>("PlaneId1");

                    b.Property<int>("SeasonId");

                    b.Property<int?>("SeasonId1");

                    b.Property<int>("TimeId");

                    b.Property<int?>("TimeId1");

                    b.HasKey("SpawnId");

                    b.HasIndex("BestiaryId");

                    b.HasIndex("BestiaryId1");

                    b.HasIndex("ContinentId");

                    b.HasIndex("ContinentId1");

                    b.HasIndex("PlaneId");

                    b.HasIndex("PlaneId1");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonId1");

                    b.HasIndex("TimeId");

                    b.HasIndex("TimeId1");

                    b.ToTable("MonsterSpawn");
                });

            modelBuilder.Entity("DBConnect.DBModels.Month", b =>
                {
                    b.Property<int>("MonthId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Days");

                    b.Property<int>("MonthOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("SeasonId");

                    b.Property<int?>("SeasonId1");

                    b.HasKey("MonthId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonId1");

                    b.ToTable("Month");
                });

            modelBuilder.Entity("DBConnect.DBModels.Npc", b =>
                {
                    b.Property<int>("Npcid")
                        .HasColumnName("NPCID");

                    b.Property<string>("AbilityScoreMods")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("AbilityScores")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ac")
                        .HasColumnName("AC")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Acmods")
                        .HasColumnName("ACMods")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("AgeCategory")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Alignment")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("AlternateNameForm")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Aura")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("BaseAtk");

                    b.Property<string>("BaseStatistics")
                        .IsUnicode(false);

                    b.Property<string>("BeforeCombat")
                        .IsUnicode(false);

                    b.Property<string>("Bloodline")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Burrow");

                    b.Property<bool?>("CharacterFlag");

                    b.Property<string>("Class")
                        .HasColumnName("Class_")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ClassArchetypes")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Climb");

                    b.Property<int?>("Cmb")
                        .HasColumnName("CMB");

                    b.Property<int?>("Cmd")
                        .HasColumnName("CMD");

                    b.Property<string>("CompanionFamiliarLink")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool?>("CompanionFlag");

                    b.Property<int?>("Cr")
                        .HasColumnName("CR");

                    b.Property<string>("DefensiveAbilities")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DescriptionVisual")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Dr")
                        .HasColumnName("DR")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DuringCombat")
                        .IsUnicode(false);

                    b.Property<string>("Environment")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("ExtractsPrepared")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Feats")
                        .IsUnicode(false);

                    b.Property<bool?>("Fly");

                    b.Property<string>("FocusedSchool")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("Fort");

                    b.Property<string>("Gear")
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Group")
                        .HasColumnName("Group_")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Hd")
                        .HasColumnName("HD")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Hp")
                        .HasColumnName("HP");

                    b.Property<string>("Hpmods")
                        .HasColumnName("HPMods")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Immune")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Implements")
                        .IsUnicode(false);

                    b.Property<int?>("Init");

                    b.Property<bool?>("IsTemplate");

                    b.Property<string>("KineticistWildTalents")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool?>("Land");

                    b.Property<string>("Languages")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("LinkText")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Melee")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Morale")
                        .IsUnicode(false);

                    b.Property<int?>("Mr")
                        .HasColumnName("MR");

                    b.Property<int?>("Mt")
                        .HasColumnName("MT");

                    b.Property<string>("Mystery")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Mythic");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("OffenseNote")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Organization")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("OtherGear")
                        .IsUnicode(false);

                    b.Property<string>("Patron")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ProhibitedSchools")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PsychicDiscipline")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("PsychicMagic")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Race")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("RacialMods")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Ranged")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Reach")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Ref")
                        .HasColumnName("Ref_");

                    b.Property<string>("Resist")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SaveMods")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Saves")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Senses")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Size")
                        .HasColumnName("Size_")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Skills")
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Space")
                        .HasColumnName("Space_")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("SpecialAbilities")
                        .IsUnicode(false);

                    b.Property<string>("SpecialAttacks")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Speed")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SpeedMod")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SpellDomains")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SpellLikeAbilities")
                        .HasMaxLength(700)
                        .IsUnicode(false);

                    b.Property<string>("SpellsKnown")
                        .IsUnicode(false);

                    b.Property<string>("SpellsPrepared")
                        .IsUnicode(false);

                    b.Property<string>("Spirit")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Sq")
                        .HasColumnName("SQ")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Sr")
                        .HasColumnName("SR")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SubType")
                        .HasColumnName("SubType_")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Swim");

                    b.Property<string>("TemplatesApplied")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ThassilonianSpecialization")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Traits")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Treasure")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnName("Type_")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("UniqueMonster");

                    b.Property<bool?>("Variant");

                    b.Property<string>("Vulnerability")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Weaknesses")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Will");

                    b.Property<int?>("Xp")
                        .HasColumnName("XP");

                    b.HasKey("Npcid");

                    b.ToTable("NPC");
                });

            modelBuilder.Entity("DBConnect.DBModels.Npcdetail", b =>
                {
                    b.Property<int>("Npcid")
                        .HasColumnName("NPCID");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("FullText")
                        .IsUnicode(false);

                    b.Property<string>("MonsterSource")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Npcid");

                    b.ToTable("NPCDetail");
                });

            modelBuilder.Entity("DBConnect.DBModels.Plane", b =>
                {
                    b.Property<int>("PlaneId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PlaneId");

                    b.ToTable("Plane");
                });

            modelBuilder.Entity("DBConnect.DBModels.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PlayerId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("DBConnect.DBModels.PlayerCampaign", b =>
                {
                    b.Property<int>("PlayerId");

                    b.Property<int>("CampaignId");

                    b.Property<int?>("CampaignId1");

                    b.Property<bool>("IsDM");

                    b.Property<int?>("PlayerId1");

                    b.HasKey("PlayerId", "CampaignId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignId1");

                    b.HasIndex("PlayerId1");

                    b.ToTable("PlayerCampaign");
                });

            modelBuilder.Entity("DBConnect.DBModels.Prerequisite", b =>
                {
                    b.Property<int>("PrerequisiteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("FeatId");

                    b.Property<int?>("SkillId");

                    b.Property<int>("Stat");

                    b.Property<int>("Value");

                    b.HasKey("PrerequisiteId");

                    b.HasIndex("FeatId");

                    b.HasIndex("SkillId");

                    b.ToTable("Prerequisite");
                });

            modelBuilder.Entity("DBConnect.DBModels.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BestiaryId");

                    b.Property<int>("ModCHA");

                    b.Property<int>("ModCON");

                    b.Property<int>("ModDEX");

                    b.Property<int>("ModINT");

                    b.Property<int>("ModSTR");

                    b.Property<int>("ModWIS");

                    b.Property<int>("RP");

                    b.Property<int?>("RaceBestiaryBestiaryId");

                    b.Property<int?>("RaceTypeId");

                    b.HasKey("RaceId");

                    b.HasIndex("BestiaryId");

                    b.HasIndex("RaceBestiaryBestiaryId");

                    b.HasIndex("RaceTypeId");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("DBConnect.DBModels.RaceSubType", b =>
                {
                    b.Property<int>("BestiaryTypeId");

                    b.Property<int>("RaceId");

                    b.Property<int?>("BestiaryTypeId1");

                    b.Property<int?>("RaceId1");

                    b.HasKey("BestiaryTypeId", "RaceId");

                    b.HasIndex("BestiaryTypeId1");

                    b.HasIndex("RaceId");

                    b.HasIndex("RaceId1");

                    b.ToTable("RaceSubType");
                });

            modelBuilder.Entity("DBConnect.DBModels.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("SeasonOrder");

                    b.HasKey("SeasonId");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("DBConnect.DBModels.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Stat");

                    b.Property<bool>("TrainedOnly");

                    b.HasKey("SkillId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("DBConnect.DBModels.Spell", b =>
                {
                    b.Property<int>("SpellId");

                    b.Property<bool>("Acid");

                    b.Property<int?>("Adept");

                    b.Property<bool>("Air");

                    b.Property<int?>("Alchemist");

                    b.Property<int?>("Antipaladin");

                    b.Property<string>("Area")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Augmented")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Bard");

                    b.Property<int?>("BloodRager");

                    b.Property<string>("Bloodline")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("CastingTime")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Chaotic");

                    b.Property<int?>("Cleric");

                    b.Property<bool>("Cold");

                    b.Property<string>("Components")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("CostlyComponents");

                    b.Property<bool>("Curse");

                    b.Property<bool>("Darkness");

                    b.Property<bool>("Death");

                    b.Property<string>("Deity")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Descriptor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Disease");

                    b.Property<bool>("Dismissable");

                    b.Property<bool>("DivineFocus");

                    b.Property<string>("Domain")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Druid");

                    b.Property<string>("Duration")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Earth");

                    b.Property<string>("Effect")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("Electricity");

                    b.Property<bool>("Emotion");

                    b.Property<bool>("Evil");

                    b.Property<bool>("Fear");

                    b.Property<bool>("Fire");

                    b.Property<bool>("Focus");

                    b.Property<bool>("Force");

                    b.Property<bool>("Good");

                    b.Property<string>("HauntStatistics")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("Hunter");

                    b.Property<int?>("Inquisitor");

                    b.Property<int?>("Investigator");

                    b.Property<bool>("LanguageDependent");

                    b.Property<bool>("Lawful");

                    b.Property<bool>("Light");

                    b.Property<string>("LinkText")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Magus");

                    b.Property<bool>("Material");

                    b.Property<int>("MaterialCost");

                    b.Property<int?>("Medium");

                    b.Property<int?>("Mesmerist");

                    b.Property<bool>("MindAffecting");

                    b.Property<bool>("Mythic");

                    b.Property<string>("MythicText")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Occultist");

                    b.Property<int?>("Oracle");

                    b.Property<bool>("Pain");

                    b.Property<int?>("Paladin");

                    b.Property<string>("Patron")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Poison");

                    b.Property<int?>("Psychic");

                    b.Property<string>("Range")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Ranger");

                    b.Property<string>("SavingThrow")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("SchoolId")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool>("Shadow");

                    b.Property<int?>("Shaman");

                    b.Property<bool>("Shapeable");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("Skald");

                    b.Property<int>("Slalevel")
                        .HasColumnName("SLALevel");

                    b.Property<bool>("Somatic");

                    b.Property<bool>("Sonic");

                    b.Property<int?>("Sor");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SpellLevel")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SpellResistance")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("SpellSchoolId");

                    b.Property<int?>("SpellSubSchoolId");

                    b.Property<int?>("Spiritualist");

                    b.Property<int?>("SubSchoolId")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("Summoner");

                    b.Property<string>("Targets")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<bool>("Verbal");

                    b.Property<bool>("Water");

                    b.Property<int?>("Witch");

                    b.Property<int?>("Wiz");

                    b.HasKey("SpellId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SpellSchoolId");

                    b.HasIndex("SpellSubSchoolId");

                    b.HasIndex("SubSchoolId");

                    b.ToTable("Spell");
                });

            modelBuilder.Entity("DBConnect.DBModels.SpellDetail", b =>
                {
                    b.Property<int>("SpellId");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("DescriptionFormatted")
                        .IsUnicode(false);

                    b.Property<string>("FullText")
                        .IsUnicode(false);

                    b.HasKey("SpellId");

                    b.ToTable("SpellDetail");
                });

            modelBuilder.Entity("DBConnect.DBModels.SpellSchool", b =>
                {
                    b.Property<int>("SpellSchoolId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("SpellSchoolId");

                    b.ToTable("SpellSchool");
                });

            modelBuilder.Entity("DBConnect.DBModels.SpellSubSchool", b =>
                {
                    b.Property<int>("SpellSubSchoolId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("SpellSchoolId");

                    b.Property<int?>("SpellSchoolId1");

                    b.HasKey("SpellSubSchoolId");

                    b.HasIndex("SpellSchoolId");

                    b.HasIndex("SpellSchoolId1");

                    b.ToTable("SpellSubSchool");
                });

            modelBuilder.Entity("DBConnect.DBModels.Terrain", b =>
                {
                    b.Property<int>("TerrainId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool>("IsBroken");

                    b.Property<bool>("IsRough");

                    b.Property<bool>("IsUnderground");

                    b.Property<bool>("IsWater");

                    b.Property<decimal>("MovementModifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TerrainId");

                    b.ToTable("Terrain");
                });

            modelBuilder.Entity("DBConnect.DBModels.Territory", b =>
                {
                    b.Property<int>("TerritoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContinentId");

                    b.Property<int?>("ContinentId1");

                    b.Property<int>("FactionId");

                    b.Property<int?>("FactionId1");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Notes");

                    b.HasKey("TerritoryId");

                    b.HasIndex("ContinentId");

                    b.HasIndex("ContinentId1");

                    b.HasIndex("FactionId");

                    b.HasIndex("FactionId1");

                    b.ToTable("Territory");
                });

            modelBuilder.Entity("DBConnect.DBModels.Time", b =>
                {
                    b.Property<int>("TimeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsNight");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("TimeOrder");

                    b.HasKey("TimeId");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("DBConnect.DBModels.TrackedEvent", b =>
                {
                    b.Property<int>("TrackedEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignId");

                    b.Property<int?>("CampaignId1");

                    b.Property<string>("DateLastOccurred");

                    b.Property<string>("DateOccurring")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("ReoccurFreq")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("TrackedEventData");

                    b.Property<int>("TrackedEventType");

                    b.HasKey("TrackedEventId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignId1");

                    b.ToTable("TrackedEvent");
                });

            modelBuilder.Entity("DBConnect.DBModels.WeaponAttribute", b =>
                {
                    b.Property<int>("WpnAttId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Effect")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("WpnAttId");

                    b.ToTable("WeaponAttribute");
                });

            modelBuilder.Entity("DBConnect.DBModels.WeaponAttributeApplied", b =>
                {
                    b.Property<int>("GearId");

                    b.Property<int>("WeaponAttributeId");

                    b.Property<int?>("AttributeWpnAttId");

                    b.Property<string>("Note");

                    b.Property<int?>("WeaponGearId");

                    b.HasKey("GearId", "WeaponAttributeId");

                    b.HasIndex("AttributeWpnAttId");

                    b.HasIndex("WeaponAttributeId");

                    b.HasIndex("WeaponGearId");

                    b.ToTable("WeaponAttributeApplied");
                });

            modelBuilder.Entity("DBConnect.DBModels.Weather", b =>
                {
                    b.Property<int>("WeatherId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ColdDanger");

                    b.Property<bool>("ColdLethal");

                    b.Property<bool>("Deadly");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Effects")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<bool>("Flooding");

                    b.Property<bool>("HeatDanger");

                    b.Property<bool>("HeatLethal");

                    b.Property<bool>("HighWind");

                    b.Property<bool>("Magical");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("VisionObscured");

                    b.HasKey("WeatherId");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("DBConnect.DBModels.Armor", b =>
                {
                    b.HasBaseType("DBConnect.DBModels.Gear");

                    b.Property<int>("ArmTyp");

                    b.Property<int>("ArmorBonus");

                    b.Property<int>("CheckPenalty");

                    b.Property<int>("MaxDex");

                    b.Property<int>("SpellFailure");

                    b.ToTable("Armor");

                    b.HasDiscriminator().HasValue("Armor");
                });

            modelBuilder.Entity("DBConnect.DBModels.Weapon", b =>
                {
                    b.HasBaseType("DBConnect.DBModels.Gear");

                    b.Property<int>("CritMin");

                    b.Property<int>("CritMult");

                    b.Property<int>("DamageType");

                    b.Property<int>("DmgDiceNum");

                    b.Property<int>("DmgDiceType");

                    b.Property<int>("Range");

                    b.ToTable("Weapon");

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("DBConnect.DBModels.Bestiary", b =>
                {
                    b.HasOne("DBConnect.DBModels.BestiaryDetail", "BestiaryDetail")
                        .WithOne("Bestiary")
                        .HasForeignKey("DBConnect.DBModels.Bestiary", "BestiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.BestiaryType", "BestiaryType")
                        .WithMany("Bestiaries")
                        .HasForeignKey("BestiaryTypeId");

                    b.HasOne("DBConnect.DBModels.BestiaryType")
                        .WithMany()
                        .HasForeignKey("Type");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryDetail", b =>
                {
                    b.HasOne("DBConnect.DBModels.Bestiary")
                        .WithOne()
                        .HasForeignKey("DBConnect.DBModels.BestiaryDetail", "BestiaryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryEnvironment", b =>
                {
                    b.HasOne("DBConnect.DBModels.Bestiary")
                        .WithMany()
                        .HasForeignKey("BestiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Bestiary", "Bestiary")
                        .WithMany("BestiaryEnvironments")
                        .HasForeignKey("BestiaryId1");

                    b.HasOne("DBConnect.DBModels.Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Environment", "Environment")
                        .WithMany("BestiaryEnvironments")
                        .HasForeignKey("EnvironmentId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryFeat", b =>
                {
                    b.HasOne("DBConnect.DBModels.Bestiary")
                        .WithMany()
                        .HasForeignKey("BestiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Bestiary", "Bestiary")
                        .WithMany("BestiaryFeats")
                        .HasForeignKey("BestiaryId1");

                    b.HasOne("DBConnect.DBModels.Feat")
                        .WithMany()
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Feat", "Feat")
                        .WithMany("BestiaryFeats")
                        .HasForeignKey("FeatId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryLanguage", b =>
                {
                    b.HasOne("DBConnect.DBModels.Bestiary")
                        .WithMany()
                        .HasForeignKey("BestiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Bestiary", "Bestiary")
                        .WithMany("BestiaryLanguages")
                        .HasForeignKey("BestiaryId1");

                    b.HasOne("DBConnect.DBModels.Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Language", "Language")
                        .WithMany("BestiaryLanguages")
                        .HasForeignKey("LanguageId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiaryMagic", b =>
                {
                    b.HasOne("DBConnect.DBModels.Bestiary")
                        .WithMany()
                        .HasForeignKey("BestiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Bestiary", "Bestiary")
                        .WithMany("BestiaryMagics")
                        .HasForeignKey("BestiaryId1");

                    b.HasOne("DBConnect.DBModels.Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Spell", "Spell")
                        .WithMany("BestiaryMagics")
                        .HasForeignKey("SpellId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiarySkill", b =>
                {
                    b.HasOne("DBConnect.DBModels.Bestiary")
                        .WithMany()
                        .HasForeignKey("BestiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Bestiary", "Bestiary")
                        .WithMany("BestiarySkills")
                        .HasForeignKey("BestiaryId1");

                    b.HasOne("DBConnect.DBModels.Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Skill", "Skill")
                        .WithMany("BestiarySkills")
                        .HasForeignKey("SkillId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.BestiarySubType", b =>
                {
                    b.HasOne("DBConnect.DBModels.Bestiary")
                        .WithMany()
                        .HasForeignKey("BestiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Bestiary", "Bestiary")
                        .WithMany("BestiarySubTypes")
                        .HasForeignKey("BestiaryId1");

                    b.HasOne("DBConnect.DBModels.BestiaryType")
                        .WithMany()
                        .HasForeignKey("BestiaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.BestiaryType", "BestiaryType")
                        .WithMany("BestiarySubTypes")
                        .HasForeignKey("BestiaryTypeId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.CampaignData", b =>
                {
                    b.HasOne("DBConnect.DBModels.Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Campaign", "Campaign")
                        .WithMany("CampaignData")
                        .HasForeignKey("CampaignId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.Character", b =>
                {
                    b.HasOne("DBConnect.DBModels.Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("DBConnect.DBModels.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId1");

                    b.HasOne("DBConnect.DBModels.Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("DBConnect.DBModels.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId1");

                    b.HasOne("DBConnect.DBModels.Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.HasOne("DBConnect.DBModels.Race", "Race")
                        .WithMany("Characters")
                        .HasForeignKey("RaceId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterClassAbility", b =>
                {
                    b.HasOne("DBConnect.DBModels.Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Character", "Character")
                        .WithMany("CharacterClassAbilities")
                        .HasForeignKey("CharacterId1");

                    b.HasOne("DBConnect.DBModels.ClassAbility")
                        .WithMany()
                        .HasForeignKey("ClassAbilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.ClassAbility", "ClassAbility")
                        .WithMany("CharacterClassAbilities")
                        .HasForeignKey("ClassAbilityId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterClassLevel", b =>
                {
                    b.HasOne("DBConnect.DBModels.Class")
                        .WithMany()
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Character", "Character")
                        .WithMany("CharacterClassLevels")
                        .HasForeignKey("CharacterId1");

                    b.HasOne("DBConnect.DBModels.Class", "Class")
                        .WithMany("CharacterClassLevels")
                        .HasForeignKey("ClassId");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterFeat", b =>
                {
                    b.HasOne("DBConnect.DBModels.Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Character", "Character")
                        .WithMany("CharacterFeats")
                        .HasForeignKey("CharacterId1");

                    b.HasOne("DBConnect.DBModels.Feat")
                        .WithMany()
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Feat", "Feat")
                        .WithMany("CharacterFeats")
                        .HasForeignKey("FeatId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterGear", b =>
                {
                    b.HasOne("DBConnect.DBModels.Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Character", "Character")
                        .WithMany("CharacterGear")
                        .HasForeignKey("CharacterId1");

                    b.HasOne("DBConnect.DBModels.Gear")
                        .WithMany()
                        .HasForeignKey("GearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Gear", "Gear")
                        .WithMany("CharacterGear")
                        .HasForeignKey("GearId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterGearEnchantment", b =>
                {
                    b.HasOne("DBConnect.DBModels.CharacterGear")
                        .WithMany()
                        .HasForeignKey("CharacterGearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.CharacterGear", "CharacterGear")
                        .WithMany("CharacterGearEnchantments")
                        .HasForeignKey("CharacterGearId1");

                    b.HasOne("DBConnect.DBModels.Enchantment")
                        .WithMany()
                        .HasForeignKey("EnchantmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Enchantment", "Enchantment")
                        .WithMany("CharacterGearEnchantments")
                        .HasForeignKey("EnchantmentId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterLanguage", b =>
                {
                    b.HasOne("DBConnect.DBModels.Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId1");

                    b.HasOne("DBConnect.DBModels.Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Language", "Language")
                        .WithMany("CharacterLanguages")
                        .HasForeignKey("LanguageId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterMagic", b =>
                {
                    b.HasOne("DBConnect.DBModels.Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Character", "Character")
                        .WithMany("CharacterMagics")
                        .HasForeignKey("CharacterId1");

                    b.HasOne("DBConnect.DBModels.Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Spell", "Spell")
                        .WithMany("CharacterMagics")
                        .HasForeignKey("SpellId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.CharacterSkill", b =>
                {
                    b.HasOne("DBConnect.DBModels.Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId1");

                    b.HasOne("DBConnect.DBModels.Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Skill", "Skill")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("SkillId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.ClassAbility", b =>
                {
                    b.HasOne("DBConnect.DBModels.Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Class", "Class")
                        .WithMany("ClassAbilities")
                        .HasForeignKey("ClassId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.ClassSkill", b =>
                {
                    b.HasOne("DBConnect.DBModels.Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Class", "Class")
                        .WithMany("ClassSkills")
                        .HasForeignKey("ClassId1");

                    b.HasOne("DBConnect.DBModels.Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Skill", "Skill")
                        .WithMany("ClassSkills")
                        .HasForeignKey("SkillId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.Continent", b =>
                {
                    b.HasOne("DBConnect.DBModels.Language")
                        .WithMany()
                        .HasForeignKey("PrimaryLanguageId");

                    b.HasOne("DBConnect.DBModels.Language", "PrimaryLanguage")
                        .WithMany("ContinentPrimaryLanguages")
                        .HasForeignKey("PrimaryLanguageLanguageId");
                });

            modelBuilder.Entity("DBConnect.DBModels.ContinentWeather", b =>
                {
                    b.HasOne("DBConnect.DBModels.Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Continent", "Continent")
                        .WithMany("ContinentWeathers")
                        .HasForeignKey("ContinentId1");

                    b.HasOne("DBConnect.DBModels.Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Season", "Season")
                        .WithMany("ContinentWeathers")
                        .HasForeignKey("SeasonId1");

                    b.HasOne("DBConnect.DBModels.Weather")
                        .WithMany()
                        .HasForeignKey("WeatherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Weather", "Weather")
                        .WithMany("ContinentWeathers")
                        .HasForeignKey("WeatherId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.Faction", b =>
                {
                    b.HasOne("DBConnect.DBModels.Language")
                        .WithMany()
                        .HasForeignKey("PrimaryLanguageId");

                    b.HasOne("DBConnect.DBModels.Language", "PrimaryLanguage")
                        .WithMany("FactionPrimaryLanguages")
                        .HasForeignKey("PrimaryLanguageLanguageId");

                    b.HasOne("DBConnect.DBModels.Race")
                        .WithMany()
                        .HasForeignKey("PrimaryRaceId");

                    b.HasOne("DBConnect.DBModels.Race", "PrimaryRace")
                        .WithMany()
                        .HasForeignKey("PrimaryRaceRaceId");
                });

            modelBuilder.Entity("DBConnect.DBModels.FavoredClass", b =>
                {
                    b.HasOne("DBConnect.DBModels.Race", "CharacterRace")
                        .WithMany("FavoredClasses")
                        .HasForeignKey("CharacterRaceRaceId");

                    b.HasOne("DBConnect.DBModels.Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Class", "Class")
                        .WithMany("FavoredClasses")
                        .HasForeignKey("ClassId1");

                    b.HasOne("DBConnect.DBModels.Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBConnect.DBModels.Location", b =>
                {
                    b.HasOne("DBConnect.DBModels.Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId");

                    b.HasOne("DBConnect.DBModels.Continent", "Continent")
                        .WithMany("Locations")
                        .HasForeignKey("ContinentId1");

                    b.HasOne("DBConnect.DBModels.Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId");

                    b.HasOne("DBConnect.DBModels.Environment", "Environment")
                        .WithMany("Locations")
                        .HasForeignKey("EnvironmentId1");

                    b.HasOne("DBConnect.DBModels.Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("DBConnect.DBModels.Faction", "Faction")
                        .WithMany("Locations")
                        .HasForeignKey("FactionId1");

                    b.HasOne("DBConnect.DBModels.Terrain")
                        .WithMany()
                        .HasForeignKey("TerrainId");

                    b.HasOne("DBConnect.DBModels.Terrain", "Terrain")
                        .WithMany("Locations")
                        .HasForeignKey("TerrainId1");

                    b.HasOne("DBConnect.DBModels.Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId");

                    b.HasOne("DBConnect.DBModels.Territory", "Territory")
                        .WithMany("Locations")
                        .HasForeignKey("TerritoryId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.MonsterSpawn", b =>
                {
                    b.HasOne("DBConnect.DBModels.Bestiary")
                        .WithMany()
                        .HasForeignKey("BestiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Bestiary", "Bestiary")
                        .WithMany("MonsterSpawns")
                        .HasForeignKey("BestiaryId1");

                    b.HasOne("DBConnect.DBModels.Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Continent", "Continent")
                        .WithMany("MonsterSpawns")
                        .HasForeignKey("ContinentId1");

                    b.HasOne("DBConnect.DBModels.Plane")
                        .WithMany()
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Plane", "Plane")
                        .WithMany("MonsterSpawns")
                        .HasForeignKey("PlaneId1");

                    b.HasOne("DBConnect.DBModels.Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Season", "Season")
                        .WithMany("MonsterSpawns")
                        .HasForeignKey("SeasonId1");

                    b.HasOne("DBConnect.DBModels.Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Time", "Time")
                        .WithMany("MonsterSpawns")
                        .HasForeignKey("TimeId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.Month", b =>
                {
                    b.HasOne("DBConnect.DBModels.Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.HasOne("DBConnect.DBModels.Season", "Season")
                        .WithMany("Months")
                        .HasForeignKey("SeasonId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.Npc", b =>
                {
                    b.HasOne("DBConnect.DBModels.Npcdetail", "Npcdetail")
                        .WithOne("Npc")
                        .HasForeignKey("DBConnect.DBModels.Npc", "Npcid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBConnect.DBModels.Npcdetail", b =>
                {
                    b.HasOne("DBConnect.DBModels.Npc")
                        .WithOne()
                        .HasForeignKey("DBConnect.DBModels.Npcdetail", "Npcid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBConnect.DBModels.PlayerCampaign", b =>
                {
                    b.HasOne("DBConnect.DBModels.Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Campaign", "Campaign")
                        .WithMany("PlayerCampaigns")
                        .HasForeignKey("CampaignId1");

                    b.HasOne("DBConnect.DBModels.Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Player", "Player")
                        .WithMany("PlayerCampaigns")
                        .HasForeignKey("PlayerId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.Prerequisite", b =>
                {
                    b.HasOne("DBConnect.DBModels.Feat", "Feat")
                        .WithMany()
                        .HasForeignKey("FeatId");

                    b.HasOne("DBConnect.DBModels.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");
                });

            modelBuilder.Entity("DBConnect.DBModels.Race", b =>
                {
                    b.HasOne("DBConnect.DBModels.Bestiary")
                        .WithMany()
                        .HasForeignKey("BestiaryId");

                    b.HasOne("DBConnect.DBModels.Bestiary", "RaceBestiary")
                        .WithMany("CharacterRaces")
                        .HasForeignKey("RaceBestiaryBestiaryId");

                    b.HasOne("DBConnect.DBModels.BestiaryType")
                        .WithMany()
                        .HasForeignKey("RaceTypeId");
                });

            modelBuilder.Entity("DBConnect.DBModels.RaceSubType", b =>
                {
                    b.HasOne("DBConnect.DBModels.BestiaryType")
                        .WithMany()
                        .HasForeignKey("BestiaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.BestiaryType", "BestiaryType")
                        .WithMany()
                        .HasForeignKey("BestiaryTypeId1");

                    b.HasOne("DBConnect.DBModels.Character")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Race", "Race")
                        .WithMany("RaceSubTypes")
                        .HasForeignKey("RaceId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.Spell", b =>
                {
                    b.HasOne("DBConnect.DBModels.SpellSchool")
                        .WithMany()
                        .HasForeignKey("SchoolId");

                    b.HasOne("DBConnect.DBModels.SpellDetail", "SpellDetail")
                        .WithOne("Spell")
                        .HasForeignKey("DBConnect.DBModels.Spell", "SpellId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.SpellSchool", "SpellSchool")
                        .WithMany("Spells")
                        .HasForeignKey("SpellSchoolId");

                    b.HasOne("DBConnect.DBModels.SpellSubSchool", "SpellSubSchool")
                        .WithMany("Spells")
                        .HasForeignKey("SpellSubSchoolId");

                    b.HasOne("DBConnect.DBModels.SpellSubSchool")
                        .WithMany()
                        .HasForeignKey("SubSchoolId");
                });

            modelBuilder.Entity("DBConnect.DBModels.SpellDetail", b =>
                {
                    b.HasOne("DBConnect.DBModels.Spell")
                        .WithOne()
                        .HasForeignKey("DBConnect.DBModels.SpellDetail", "SpellId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBConnect.DBModels.SpellSubSchool", b =>
                {
                    b.HasOne("DBConnect.DBModels.SpellSchool")
                        .WithMany()
                        .HasForeignKey("SpellSchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.SpellSchool", "SpellSchool")
                        .WithMany("SpellSubSchools")
                        .HasForeignKey("SpellSchoolId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.Territory", b =>
                {
                    b.HasOne("DBConnect.DBModels.Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Continent", "Continent")
                        .WithMany("Territories")
                        .HasForeignKey("ContinentId1");

                    b.HasOne("DBConnect.DBModels.Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Faction", "Faction")
                        .WithMany("Territories")
                        .HasForeignKey("FactionId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.TrackedEvent", b =>
                {
                    b.HasOne("DBConnect.DBModels.Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId1");
                });

            modelBuilder.Entity("DBConnect.DBModels.WeaponAttributeApplied", b =>
                {
                    b.HasOne("DBConnect.DBModels.WeaponAttribute", "Attribute")
                        .WithMany("WeaponAttributesApplied")
                        .HasForeignKey("AttributeWpnAttId");

                    b.HasOne("DBConnect.DBModels.Weapon")
                        .WithMany()
                        .HasForeignKey("GearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.WeaponAttribute")
                        .WithMany()
                        .HasForeignKey("WeaponAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBConnect.DBModels.Weapon", "Weapon")
                        .WithMany("WeaponAttributesApplied")
                        .HasForeignKey("WeaponGearId");
                });
#pragma warning restore 612, 618
        }
    }
}
